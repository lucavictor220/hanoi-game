min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text))
}
if(!between(n, min, max)) {
return(n <- input_value(text))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions = permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions = permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
cat(possibleActions)
View(possibleActions)
View(possibleActions)
possibleActions = permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
a = list()
a
list
a
node = list()
node
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions = permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions = permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
cat(possibleActions)
View(possibleActions)
View(possibleActions)
initialState
setwd(getwd())
source("search_functions.r")
setwd(getwd())
source("search_functions.R")
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions = permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
cat(possibleActions)
cat(possibleAcitions[1])
cat(possibleActions[1])
cat(isApplicable(initialState, possibleActions[1]))
initialState
initialState[1]
initialState[1] == 2
possibleAcitions[1]
possibleAcitions
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions = permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
cat(possibleActions)
possibleActions[1]
View(possibleActions)
View(possibleActions)
possibleActions[2]
possibleActions[3]
possibleActions[4]
possibleActions[6]
possibleActions[10]
cat(isApplicable(initialState, c(1, 2)))
cat(isApplicable(initialState, c(1, 2)))
cat(isApplicable(initialState, c(1, 2)))
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions = permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
cat(possibleActions)
cat(possibleActions[1])
cat(isApplicable(initialState, c(1, 2)))
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
cat(isApplicable(initialState, c(1, 2)))
cat(isApplicable(initialState, c(1, 3)))
cat(isApplicable(initialState, c(2, 1)))
cat(isApplicable(initialState, c(2, 3)))
cat(isApplicable(initialState, c(3, 2)))
cat(isApplicable(initialState, c(3, 1)))
cat(isApplicable(initialState, c(1, 3)))
possibleActions <- permutations(nrRods, 2, c(1:nrRods), repeats.allowed=FALSE)
cat(possibleActions)
cat(possibleActions(1))
cat(possibleActions[1]
#Check if is Applicable works for possible actions
cat(isApplicable(initialState, c(1, 3)))
# Creation of the frontier with only the initial node
node = list()
node$state = initialstate
node$actions = c(0,0)
node$deep = 0
frontier = list(node)
# Count is  used to avoid to fill memory (for bigger problems must be changed)
count = 1
countlimit = 100
# While final state not found
while (!isFinalState(node$state,finalstate) & count<countlimit){
# Break if frontier is empty
if (length(frontier)==0){
break
}
# Extract first node of the frontier
firstnode = frontier[[1]]
frontier[[1]] = NULL
# If final state found, break and return results
if (isFinalState(firstnode$state)){
print("Final State Found")
break
}
# For each one of the possible actions
for (i in 1:nrow(possibleactions)){
action = as.numeric(possibleactions[1,])
state  = firstnode$state
# If possible, it is applied and new node stored in frontier
if (isApplicable(firstnode$state,action)){
newnode = list()
newstate = state
newnode$state = effect(state,action)
newnode$actions = rbind(firstnode$actions,action)
newnode$deep = firstnode$deep+1
frontier = append(frontier,list(newnode))
}
}
count = count+1
}
# Show the obtained (or not) final solution
if (count == countlimit | length(frontier)==0){
print("Maximum Number of iterations reached. No solution found")
} else{
print("Solution found!!")
print(firstnode$actions)
}
cat(possibleActions[1])
View(possibleActions)
View(possibleActions)
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = TRUE)
cat(possibleActions)
View(possibleActions)
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = TRUE)
cat(possibleActions)
cat(possibleActions[1])
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = FALSE)
cat(possibleActions)
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = TRUE)
cat(possibleActions)
cat(possibleActions[1])
cat(possibleActions[2])
cat(possibleActions[3])
cat(possibleActions[4])
cat(possibleActions[5])
cat(possibleActions[6])
cat(possibleActions[7])
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = TRUE)
possibleActions
possibleActions[1]
print (possibleActions)
possibleActions(1, )
possibleActions[1, ]
possibleActions[,1]
View(possibleActions)
View(possibleActions)
cat(isApplicable(initialState, possibleActions[1,]))
cat(isApplicable(initialState, possibleActions[2,]))
cat(isApplicable(initialState, possibleActions[3,]))
View(possibleActions)
View(possibleActions)
cat(isApplicable(initialState, possibleActions[4,]))
cat(isApplicable(initialState, possibleActions[5,]))
cat(isApplicable(initialState, possibleActions[6,]))
isFinalState(initialState, c(2, 2, 2))
isFinalState(initialState, c(3, 2, 2))
isFinalState(initialState, c(3, 3, 2))
isFinalState(initialState, c(3, 3, 3))
isFinalState(c(3, 3, 3), c(3, 3, 3))
isFinalState(c(3, 3, 3), c(3, 3, 3))
isFinalState(c(3, 3, 3), c(3, 3, 3))
setwd(getwd())
source("search_functions.R")
isFinalState(c(3, 3, 3), c(3, 3, 3))
isFinalState(c(3, 3, 3), c(2, 2, 2))
isFinalState(c(2, 3, 2), c(2, 2, 2))
isFinalState(c(2, 2, 2), c(2, 2, 2))
