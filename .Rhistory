max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = TRUE)
cat(possibleActions[1])
cat(isApplicable(c(2, 2, 2), possibleActions[3,]))
if (isApplicable(c(2, 2, 2), possibleActions[3,])) {
newState = effect(c(2, 2, 2), possibleActions[3,])
}
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
node = list()
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
node = list()
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
indL = c()
indL = c(1, 2, 3)
indx = c(indl, 2)
indx = c(indL, 2)
cat
indx
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
listt = c(2, 3)
listt <- 2
listt
append(listt, 3)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = TRUE)
cat(possibleActions[1])
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
node = list()
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
("/Users/vitiok/University/IS/assignment_1")
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
newState = c(2,2,2)
print(newState)
a = c(2,1)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
newState = c(1,1,1)
print(newState)
a = c(1,3)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
isFinalState(c(2, 2, 2), c(2, 2, 2))
node = list()
newState = c(1,1,1)
print(newState)
a = c(1,3)
print(possibleActions)
state = effect(c(2, 2, 2), a)
print(state)
newState = c(1,1,1)
print(newState)
print(possibleActions)
state = effect(newState, c(1,3))
print(state)
newState = c(2,2,2)
print(newState)
print(possibleActions)
state = effect(newState, c(2,3))
print(state)
newState = c(2,2,2)
print(newState)
print(possibleActions)
state = effect(newState, c(2,3))
print(state)
rm(list=ls())
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
newState = c(2,2,2)
print(newState)
print(possibleActions)
rm(list=ls())
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = TRUE)
cat(possibleActions[1])
cat(isApplicable(c(2, 2, 2), possibleActions[3,]))
if (isApplicable(c(2, 2, 2), possibleActions[3,])) {
newState = effect(c(2, 2, 2), possibleActions[3,])
}
newState = c(2,2,2)
print(newState)
print(possibleActions)
state = effect(newState, c(2,3))
print(state)
rm(list=ls())
setwd("/Users/vitiok/University/IS/assignment_1")
setwd(getwd())
source("search_functions.R")
library(gtools)
min_rods  <- 3
min_disks <- 3
max_rods  <- 10
max_disks <- 10
between <- function(value, min=0, max=20) {
if(value < min || value > max) {
return(FALSE)
}
return(TRUE)
}
input_value <- function(text, min=0, max=20){
n <- readline(prompt=text)
n <- as.integer(n)
if (is.na(n)){
return(n <- input_value(text, min, max))
}
if(!between(n, min, max)) {
return(n <- input_value(text, min, max))
}
return(n)
}
nrDisks <- input_value("Enter nr of Disks: ", min_disks, max_disks)
nrRods  <- input_value("Enter nr of Rods: ", min_rods, max_rods)
initialRod <- input_value("Enter initial rod position: ", 1, nrRods)
finalRod <- input_value("Enter final rod position: ", 1, nrRods)
initialState <- vector(mode = "integer", length = nrRods)
finalState   <- vector(mode = "integer", length = nrRods)
finalState   <- replace(finalState, initialState == 0, finalRod)
initialState <- replace(initialState, initialState == 0, initialRod)
possibleActions <- permutations(nrRods, 2, c(1:nrRods), set = TRUE)
cat(possibleActions[1])
cat(isApplicable(c(2, 2, 2), possibleActions[3,]))
if (isApplicable(c(2, 2, 2), possibleActions[3,])) {
newState = effect(c(2, 2, 2), possibleActions[3,])
}
newState = c(2,2,2)
print(newState)
print(possibleActions)
state = effect(newState, c(2,3))
newState = c(2,2,2, 2)
print(newState)
print(possibleActions)
state = effect(newState, c(2,3))
print(state)
newState = c(2,2,2, 2)
print(newState)
print(possibleActions)
state = effect(newState, c(2,1))
print(state)
